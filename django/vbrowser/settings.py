"""
Django settings for vbrowser project.

Generated by 'django-admin startproject' using Django 4.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv
import re
import base64


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

ENV_PATH = Path(__file__).resolve().parent.parent / '.env'
load_dotenv(dotenv_path=str(ENV_PATH), override=True)
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ['SECRET_KEY']

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ['DEBUG']

raw_hosts = os.environ['ALLOWED_HOSTS']

if raw_hosts.strip():
    ALLOWED_HOSTS = raw_hosts.split(',') + [
        '127.0.0.1', 'localhost', '0.0.0.0', 'django', 'host.docker.internal'
    ]
else:
    ALLOWED_HOSTS = [
        '127.0.0.1', 'localhost', '0.0.0.0', 'django', 'host.docker.internal'
    ]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sitemaps',
    'django.contrib.humanize',

    'main',
    'api',
    'rest_framework',
    'rest_framework.authtoken',
    'storages',
    'allauth',
    'allauth.account',
    'allauth.mfa',
    'allauth.socialaccount',
    'django_celery_beat',
    'django_celery_results',
    'corsheaders',
    'django_hosts',
    'drf_spectacular',
]

CUSTOM_DOMAIN = os.environ['CUSTOM_DOMAIN']

SITE_ID = 1

MIDDLEWARE = [
    'django_hosts.middleware.HostsRequestMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'allauth.account.middleware.AccountMiddleware',
    'django_hosts.middleware.HostsResponseMiddleware',
]

CORS_ALLOW_CREDENTIALS = True

CORS_ALLOWED_ORIGIN_REGEXES = [
    rf"^https://[a-z0-9-]+\.{re.escape(CUSTOM_DOMAIN)}(:[0-9]+)?$",  
    rf"^https://{re.escape(CUSTOM_DOMAIN)}(:[0-9]+)?$",              
    rf'^https://{re.escape(CUSTOM_DOMAIN)}$',
    rf"^http://[a-z0-9-]+\.{re.escape(CUSTOM_DOMAIN)}(:[0-9]+)?$",  
    rf"^http://{re.escape(CUSTOM_DOMAIN)}(:[0-9]+)?$",              
    rf'^http://{re.escape(CUSTOM_DOMAIN)}$',
]

ROOT_URLCONF = 'vbrowser.urls'
ROOT_HOSTCONF = 'vbrowser.hosts'
DEFAULT_HOST= 'default'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'vbrowser.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': os.environ['DB_NAME'],
        'USER': os.environ['DB_USER'],
        'PASSWORD': os.environ['DB_PASSWORD'],
        'HOST': os.environ['DB_HOST'],
        'PORT': os.environ['DB_PORT'],
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'America/New_York'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]

ACCOUNT_FORMS = {'signup': 'main.forms.MyCustomSignupForm'}

ACCOUNT_SIGNUP_FIELDS = ['email*', 'password1*', 'password2*']
ACCOUNT_LOGIN_METHODS = {'email'}
ACCOUNT_EMAIL_VERIFICATION="none"
ACCOUNT_LOGOUT_REDIRECT_URL = '/'
ACCOUNT_LOGOUT_ON_GET = True
LOGIN_REDIRECT_URL= '/'
LOGIN_URL = '/accounts/login/'

REST_FRAMEWORK = {
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
    ],
   'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
    
}

SPECTACULAR_SETTINGS = {
    'TITLE': f'{CUSTOM_DOMAIN} API',
    'DESCRIPTION': 'Secured and Isolated Free Virtual Browser',
    'VERSION': '1.0.0',
    # OTHER SETTINGS
    'SECURITY': [{'TokenAuth': []}, {'X-Special-Key': []}],
    'SECURITY_SCHEMES': {
        'TokenAuth': {
            'type': 'apiKey',
            'in': 'header',
            'name': 'Authorization',
            'description': 'Token-based authentication with required prefix "Token"'
        },
        'X-Special-Key': {
            'type': 'apiKey',
            'in': 'header',
            'name': 'X-Special-Key',
            'description': 'Special integration key required for accessing the API'
        },
    },
}

CELERY_BROKER_URL = os.environ['REDIS_URL']
CELERY_BROKER_REDIS_URL= os.environ['REDIS_URL']

CELERY_RESULT_BACKEND = "django-db"
CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'
CELERY_RESULTS_EXTENDED = True

DATA_UPLOAD_MAX_MEMORY_SIZE = 100 * 1024 * 1024

AWS_ACCESS_KEY_ID = os.environ['AWS_ACCESS_KEY_ID']
AWS_SECRET_ACCESS_KEY = os.environ['AWS_SECRET_ACCESS_KEY']

LOGGER_ENABLED = os.environ['LOGGER_ENABLED']

if LOGGER_ENABLED == "True":
    LOGGING = {
        'version': 1,
        'disable_existing_loggers': False,
        'handlers': {
            'file': {
                'level': 'DEBUG',
                'class': 'logging.FileHandler',
                'filename': os.path.join(BASE_DIR, 'debug.log'),
            },
        },
        'loggers': {
            'django.db.backends': {
                'handlers':  ['file'],
                'level':     'WARNING',
                'propagate': False,
            },
            'django': {
                'handlers': ['file'],
                'level': 'DEBUG',
                'propagate': True,
            },
            'main': { 
                'handlers': ['file'],
                'level': 'DEBUG',
                'propagate': True,
            },
        
        },
    }

SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SECURE = True
SECURE_SSL_REDIRECT = True
SESSION_COOKIE_AGE = 1209600

SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True

SECURE_HSTS_SECONDS = 31536000
SECURE_HSTS_PRELOAD = True
SECURE_HSTS_INCLUDE_SUBDOMAINS = True
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

# MFA Settings
MFA_ADAPTER = "allauth.mfa.adapter.DefaultMFAAdapter"

DEFAULT_IDLE_THRESHOLD = os.environ['DEFAULT_IDLE_THRESHOLD']
SUBNET_ID = os.environ['SUBNET_ID']
SECURITY_GROUP_ID = os.environ['SECURITY_GROUP_ID']
CLOUDFLARE_API_TOKEN = os.environ['CF_Token']
CLOUDFLARE_ZONE_ID = os.environ['CF_Zone_ID']
API_SPECIAL_KEY = str(base64.b64encode(CUSTOM_DOMAIN.encode()).decode())